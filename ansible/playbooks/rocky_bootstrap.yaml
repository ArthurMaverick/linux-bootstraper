---
- name: Install Softwares on Rocky Linux
  hosts: proxmox_servers
  become: true # run tasks woth sudo


  tasks:
#============================================
#  MAIN PACKAGES
# ===========================================
    - name: Upgrade all packages on servers
      dnf:
        name: '*'
        state: latest
#============================================
#  SSH
# ===========================================
    - name: Install OpenSSH Server
      package:
        name: openssh-server
        state: present
      when: ansible_os_family == 'RedHat'

    - name: Start and enable OpenSSH service
      service:
        name: sshd
        state: started
        enabled: yes
      when: ansible_os_family == 'RedHat'
#============================================
#  FIREWALL
# ===========================================
    - name: Install firewalld
      package:
        name: firewalld
        state: present
      when: ansible_os_family == 'RedHat'

    - name: Start and enable firewalld
      service:
        name: firewalld
        state: started
        enabled: yes
      when: ansible_os_family == 'RedHat'

    - name: Allow SSH through the firewall
      firewalld:
        service: ssh
        permanent: yes
        state: enabled
      when: ansible_os_family == 'RedHat'
#============================================
#  DOCKER
# ===========================================
    - name: Uninstall old versions
      dnf:
        name:
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: absent

    - name: Set up docker repository
      shell: |
        sudo yum install -y yum-utils
        sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      when: ansible_os_family == 'RedHat'

    - name: Install the latest version of Docker Engine and containerd
      dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
      notify: Start and enable docker

    - name: Add the current user to the docker group
      user:
        name: rocky
        groups: docker
        append: yes
#============================================
#  GIT
#============================================
    - name: Install git
      dnf:
        name:
          - git
#============================================
#  TERRAFORM
#============================================
    - name: Install Unzip
      dnf:
        name:
          - zip

    - name: Download Terraform binary
      get_url:
        url: "https://releases.hashicorp.com/terraform/1.6.4/terraform_1.6.4_linux_amd64.zip"
        dest: "/tmp/terraform.zip"
  
    - name: Unarchive Terraform binary
      unarchive:
        src: "/tmp/terraform.zip"
        dest: "/usr/bin/"
        remote_src: true
        creates: "/usr/bin/terraform"

    - name: Intall TF env
      shell: |
        git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
        echo 'export PATH=$PATH:$HOME/.tfenv/bin' >> ~/.bashrc
#============================================
#  KUBECTL
#============================================
    - name: install kubectl
      shell: |
        cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
        enabled=1
        gpgcheck=1
        gpgkey=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key
        EOF
        sudo yum install -y kubectl
#============================================
#  K9S
#============================================
    - name: Install K(9)s
      get_url:
        url: "https://github.com/derailed/k9s/releases/download/v0.28.2/k9s_Linux_amd64.tar.gz"
        dest: "/tmp/k9s.tar.gz"
    
    - name: Unarchive k9s binary
      ansible.builtin.unarchive:
        src: "/tmp/k9s.tar.gz"
        dest: "/usr/bin/"
        remote_src: true
        creates: "/usr/bin/k9s"
#============================================
#  FONTS
#============================================ 
    - name: Download NerdFonts - regular
      get_url:
        url: https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf
        dest: "/tmp/MesloLGS-NF-Regular.ttf"

    - name: Download NerdFonts - bolds
      get_url:
        url: https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf
        dest: "/tmp/MesloLGS-NF-Bold.ttf"
    
    - name: Download NerdFonts - italic
      get_url:
        url: https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf
        dest: "/tmp/MesloLGS-NF-Italic.ttf"

    - name: Download NerdFonts - bold italic
      get_url:
        url:  https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf
        dest: "/tmp/MesloLGS-NF-Bold-Italic.ttf"

    - name: Move font files to fonts directory - regular
      copy:
        src: "/tmp/MesloLGS-NF-Regular.ttf"
        dest: "~/.local/share/fonts/"
        owner: root
        remote_src: true

    - name: Move font files to fonts directory - bolds
      copy:
        src: "/tmp/MesloLGS-NF-Bold.ttf"
        dest: "~/.local/share/fonts/"
        owner: root
        remote_src: true
    
    - name: Move font files to fonts directory - italic
      copy:
        src: "/tmp/MesloLGS-NF-Italic.ttf"
        dest: "~/.local/share/fonts/"
        owner: root
        remote_src: true

    - name: Move font files to fonts directory - bold italic
      copy:
        src: "/tmp/MesloLGS-NF-Bold-Italic.ttf"
        dest: "~/.local/share/fonts/"
        owner: root
        remote_src: true

    - name: Install Nerdfonts - all
      get_url:
        url: "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.0/FiraCode.zip"
        dest: "/tmp/FiraCode.zip"

    - name: Unarchive firecode binary
      unarchive:
        src: "/tmp/FiraCode.zip"
        dest: "~/.local/share/fonts/"
        remote_src: true

    - name: install fonts config
      dnf:
        name:
          - fontconfig
    
    - name: refresh fonts
      shell: |
        fc-cache ~/.local/share/fonts
#============================================
#  ZSH
#============================================ 
    - name: Install zsh packages
      dnf:
        name:
          - zsh
          - util-linux-user
        state: latest

    - name: Check if /root/.oh-my-zsh exists
      stat:
        path: "/root/.oh-my-zsh"
      register: oh_my_zsh_check

    - name: Install zsh packages
      shell: |
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      when: oh_my_zsh_check.stat.exists == False
    
    - name: Set user shell to zsh
      user:
        name: "root"
        shell: /usr/bin/zsh

    - name: Install powerlevel10k
      git:
        repo: https://github.com/romkatv/powerlevel10k.git
        dest: ~/.oh-my-zsh/themes/powerlevel10k
        version: master
        update: yes
    
    - name: write .zshrc for users
      copy:
        src: "../files/.zshrc.j2"
        dest: '~/.zshrc'
        backup: yes
        # owner: 'root'
        # group: 'root'
        # mode: 0600
    
    - name: write .p10k.zsh for users
      copy:
        src: "../files/p10k.zsh"
        dest: '~/.p10k.zsh'
        backup: yes
        owner: root
        group: root
        mode: '0600'
    
    - name: clone zsh-autosuggestions for users
      git:
        repo: 'https://github.com/zsh-users/zsh-autosuggestions.git'
        version: master
        dest: '~/.oh-my-zsh/custom/plugins/zsh-autosuggestions'
      # become: yes
      # become_user: '{{ item.username }}'
      
    - name: clone zsh-syntax-highlighting for users
      git:
        repo: 'https://github.com/zsh-users/zsh-syntax-highlighting.git'
        version: master
        dest: '~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting'
      # become: yes
      # become_user: '{{ item.username }}'

    - name: Restart zsh
      command: zsh -c "source ~/.zshrc"
#============================================
#  GO
#============================================ 
    - name: Clear go files
      file:
        path: /usr/local/go
        state: absent

    - name: Download Golang
      get_url:
        url: "https://go.dev/dl/go1.21.4.linux-amd64.tar.gz"
        dest: "/tmp/go1.21.4.linux-amd64.tar.gz"

    - name: Unarchive Golang binary
      unarchive:
        src: /tmp/go1.21.4.linux-amd64.tar.gz
        dest: "/usr/local/"
        remote_src: true
#============================================
#  FOLDER STRUCTURE
#============================================ 
    - name: Create projects directory
      file:
        path: "/root/projects"
        state: directory

    - name: Create templates directory
      file:
        path: "/root/templates"
        state: directory

    - name: Create scripts directory
      file:
        path: "/root/scripts"
        state: directory

    - name: Create config directory
      file:
        path: "/root/config"
        state: directory
#============================================
#  AWS
#============================================ 
    - name: Remove aws cli packages
      shell: |
        sudo yum remove awscli

    - name: Download aws cli
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: "/tmp/awscliv2.zip"

    - name: Unarchive awscli binary
      unarchive:
        src: "/tmp/awscliv2.zip"
        dest: "/tmp/"
        remote_src: true
    
    - name: Check if exists
      stat:
        path: "/usr/local/aws-cli/v2/current"
      register: aws_cli

    - name: Install aws cli
      shell: |
        sh /tmp/aws/install
      when: aws_cli.stat.exists == False

#============================================
#  AWS VAULT
#============================================ 
    - name: Download aws vault
      get_url:
        url: https://github.com/99designs/aws-vault/releases/download/v7.2.0/aws-vault-linux-amd64
        dest: "/tmp/aws-vault"

    - name: Move file for to be executed
      copy:
        src: "/tmp/aws-vault"
        dest: "/usr/bin/aws-vault"
        mode: a+x
        remote_src: true
#============================================
#  NEO VIM
#============================================   
    - name: Install nvim
      dnf:
        name: "{{ item }}"
        state: present
      with_items:
        - epel-release
        # - neovim
        - compat-lua-libs
        - libtermkey
        - libtree-sitter
        - libvterm
        - luajit
        - luajit2.1-luv
        - msgpack
        - unibilium
        - xsel

    - name: Install nvim packages 1
      get_url:
        url: https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
        dest: "/tmp/nvim-linux64.tar.gz"

    - name: Unarchive nvim binary
      unarchive:
        src: "/tmp/nvim-linux64.tar.gz"
        dest: "~/.local/share/"
        creates: "~/.local/share/nvim-linux64"
        remote_src: true

    - name: reference nvim bin
      shell: |
        cd /usr/bin/
        ln -sf ~/.local/share/nvim-linux64/bin/nvim nvim

    - name: Install nvim helpers
      dnf:
        name: "{{ item }}"
        state: present
      with_items:
        - libtool
        - autoconf
        - automake
        - cmake
        - gcc
        - gcc-c++
        - make
        - pkgconfig
        - patch
        - gettext

    - name: Install nvim config
      shell:
        git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth 1 && nvim

  handlers:
    - name: Start and enable docker
      systemd:
        name: docker
        state: started
        enabled: yes 

    